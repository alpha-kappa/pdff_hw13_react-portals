{"version":3,"sources":["components/Alert/index.js","hocs/withDisappear.js","hocs/withPortal.js","components/AlertsForm/index.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["Alert","_ref","text","react_default","a","createElement","className","Disappear","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","hideChildren","setState","showChildren","removeTimer","clearTimeout","state","timer","ms","timeout","setTimeout","children","React","Component","withDisappear","withDisappear_Disappear","withPortal","domNode","ReactDOM","createPortal","DISSAPEAR_TIMEOUT","portalNode","document","getElementById","AlertsForm","onChangeValue","value","target","pushAlert","DisappearableAlert","PortaledAlert","key","Date","now","prev","alerts","concat","toConsumableArray","setFocusOnInput","inputRef","createRef","current","focus","_this$state","onChange","ref","type","disabled","length","onClick","App","src","logo","alt","components_AlertsForm","Boolean","window","location","hostname","match","render","src_App","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.8f5b4ae2.chunk.js","sourcesContent":["import React from 'react';\n\nexport default ({text}) => <div className=\"alert\">{text}</div>\n","import React from 'react';\n\nclass Disappear extends React.Component {\n    constructor(props){\n        super(props);\n\n        this.state = {\n            showChildren: true,\n            timer: null,\n        }\n    }\n\n    componentDidMount() {\n        const { ms } = this.props;\n        const timeout = setTimeout(this.hideChildren, ms);\n\n        this.setState({timer: timeout});\n    }\n\n    hideChildren = () => {\n        this.setState({showChildren: false});\n    }\n\n    removeTimer = () => {\n        clearTimeout(this.state.timer);\n        this.setState({timer: null});\n    }\n\n    componentWillUnmount() {\n        this.removeTimer();\n    }\n\n    render() {\n        const { showChildren } = this.state;\n\n        return showChildren ? this.props.children : null;\n    }\n}\n\nexport default ms => Component => props => <Disappear ms={ms}><Component {...props} /></Disappear>","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nexport default (domNode) => (Component) => props => ReactDOM.createPortal(<Component {...props} />, domNode); ","import React from 'react';\n\nimport Alert from '../Alert';\nimport {withDisappear, withPortal} from '../../hocs';\n\nconst DISSAPEAR_TIMEOUT = 3000;\nconst portalNode = document.getElementById('alerts-panel');\n\nclass AlertsForm extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            value: '',\n            alerts: [],\n        }\n\n        this.inputRef = React.createRef();\n    }\n    \n    componentDidMount() {\n        this.setFocusOnInput()\n    }\n\n    onChangeValue = ({target: {value}}) => this.setState({value})\n\n    setFocusOnInput() {\n        this.inputRef.current.focus();\n    }\n\n    pushAlert = () => {\n        const {value: text} = this.state;\n\n        const DisappearableAlert = withDisappear(DISSAPEAR_TIMEOUT)(Alert);\n        const PortaledAlert = withPortal(portalNode)(DisappearableAlert)\n        const key = Date.now();\n        this.setState(prev => ({value: '', alerts: [...prev.alerts, <PortaledAlert text={text} key={key} />]}));\n\n        this.setFocusOnInput();\n    }\n\n    render() {\n        const {value, alerts} = this.state;\n\n        return (\n            <div>\n                <input value={value} onChange={this.onChangeValue} ref={this.inputRef} />\n                <button type=\"button\" disabled={!value.length} onClick={this.pushAlert}>Push alert</button>\n                {alerts}\n            </div>\n        )\n    }\n}\n\nexport default AlertsForm;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport AlertsForm from './components/AlertsForm';\nimport AlertsPanel from './components/Alert';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <AlertsForm />\n        <AlertsPanel />\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}